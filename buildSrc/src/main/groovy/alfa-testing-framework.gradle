import extra.MyLogger
import org.gradle.api.GradleException

def prefix = "http://axiomatics.com/alfa/identifier/"

def myErrOut = new ByteArrayOutputStream();
def BUILD_ALFA_DEPENDENCIES = project.rootProject.file("build/alfa/dependencies")

repositories {
    mavenCentral()
    maven {
        url "s3://axiomatics-cr-maven/release"
        credentials(AwsCredentials) {
            accessKey = System.env.AXIOMATICS_ACCESS_KEY_ID ?: project.findProperty('AXIOMATICS_ACCESS_KEY_ID')
            secretKey = System.env.AXIOMATICS_SECRET_ACCESS_KEY ?: project.findProperty('AXIOMATICS_SECRET_ACCESS_KEY')
        }
    }
    maven {
        url "s3://axiomatics-customer-artifacts/releases"
        credentials(AwsCredentials) {
            accessKey = System.env.AXIOMATICS_ACCESS_KEY_ID ?: project.findProperty('AXIOMATICS_ACCESS_KEY_ID')
            secretKey = System.env.AXIOMATICS_SECRET_ACCESS_KEY ?: project.findProperty('AXIOMATICS_SECRET_ACCESS_KEY')
        }
    }
    //mavenLocal() {metadataSources { artifact() } }
}

configurations {
    domTool
    alfac
    pip
    testImplementation.extendsFrom(pip)
    policy
    ads.extendsFrom(pip)
    adsCompile
}


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'hours'
}


dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation "com.axiomatics.cr.alfa.test:alfa-test-framework:1.0.11-SNAPSHOT"

    domTool(group: 'com.axiomatics.domtool', name: 'domtool', version: '0.9.0')
    domTool(group: 'com.axiomatics.domtool', name: 'domtool-lib', version: '0.9.0')

    adsCompile "com.axiomatics.access-decision-service:access-decision-service:1.10.2"

    pip "com.axiomatics.cr.pip:constant-pip:2022.01.20"
    pip "com.axiomatics.cr.pip:http-pip:2023.03.10"
    pip "com.axiomatics.cr.pip:parser-pip:2022.01.21-SNAPSHOT"
    pip "com.axiomatics.attribute-connectors.sql:sql-attribute-connector:6.2.2@jar"
    pip "com.axiomatics.attribute-connectors.ldap:ldap-attribute-connector:6.3.0@jar"
    pip "com.axiomatics.attribute-connectors.table:table-attribute-connector:7.0.0@jar"

    alfac "com.axiomatics.alfa:alfac:1.3.0-SNAPSHOT"

}
configurations.pip {
    exclude group: 'org.apache.httpcomponents' //included in ADS 1.10.0
    exclude group: 'org.jvnet.jaxb2_commons', module: 'jaxb2-basics-runtime' //included in ADS 1.10.0
    exclude group: 'commons-io', module: 'commons-io' //included in ADS 1.10.0
    exclude group: 'commons-codec', module: 'commons-codec' //included in ADS 1.10.0
    exclude group: 'commons-logging', module: 'commons-logging' //included in ADS 1.10.0
    exclude group: 'org.apache.commons', module: 'commons-lang3' //included in ADS 1.10.0
    exclude group: 'org.ow2.asm', module: 'asm' //included in ADS 1.10.0
    exclude group: 'log4j', module: 'log4j' //included in ADS 1.10.0

}

task compileAlfaToPackage(type: JavaExec) {
    doFirst {

        def dir = "${projectDir}/${project.extensions.alfa.srcDir}"
        logger.info("Compiling to package from ${dir}")
        if (!new File(dir).isDirectory()) {
            throw new GradleException("alfa.srcDir is not set or does not exist: ${new File(dir).getAbsolutePath()}")
        }
        myErrOut = new MyLogger();
        errorOutput myErrOut
        workingDir dir
        def outFile = "${buildDir}/alfa/domain/package/policy_package.zip"
        logger.info("Writing package to package ${outFile}")
        args "alfaSpecifications",
                '-p', "${outFile}",
                '-m', "${project.extensions.alfa.mainpolicy}"
    }
    mainClass = "com.axiomatics.alfa.cli.Main"
    group = "axiomatics"
    classpath = project.configurations.alfac
    jvmArgs "--illegal-access=permit"
    doLast {
        println myErrOut.flush()
    }
}

task stageAlfaDependencies(type: Sync) {
    logger.info("Staging from ${configurations.policy} to ${BUILD_ALFA_DEPENDENCIES}")
    from configurations.policy
    into "${BUILD_ALFA_DEPENDENCIES}"
}
project.tasks.withType(Test) {
    logger.info("Configuring test task ${it.name}")
    it.dependsOn stageAlfaDependencies
    it.environment.put("ALFA_RESOLVED_DIR", "${BUILD_ALFA_DEPENDENCIES}")
}

task prepareDirs {
    mkdir "${buildDir}/alfa/domain/package"
    mkdir "${buildDir}/alfa/domain/ads"
}
task stageDeploymentDescriptor(type: Copy) {
    into "${buildDir}/alfa/domain/ads/"
}

task stageLicenseFile {
    doFirst {
        def srcFile ="${projectDir}/${project.extensions.alfa.licenseFile}"
        project.logger.info("ADS license file at ${srcFile}")
        if (srcFile == null)  throw new GradleException("Specify alfa.licenseFile");
        if (! new File(srcFile).canRead())  throw new GradleException("Can not read license file at ${new File(srcFile).getAbsolutePath()}");
    }
    doLast {
        boolean ok = project.copy {
            from inputs.properties.srcFile
            into inputs.properties.dstDir
        }.didWork
        if (!didWork)  throw new GradleException("could not copy license file ${srcFile}");
    }
}

task runAds(type: JavaExec) {
    doFirst {
        myErrOut = new MyLogger();
        errorOutput myErrOut
        environment "LICENSE", project.tasks.stageLicenseFile.inputs.properties.filename
        logger.info("Starting ADS from ${workingDir}. Environment is ${environment}")
    }
    group = "axiomatics"
    classpath = project.configurations.ads
    workingDir "${buildDir}/alfa/domain/ads/"
    mainClass = "com.axiomatics.ads.App"
    ignoreExitValue true
    args 'server', "deployment.yaml"
    doLast {
        println myErrOut.flush()
    }
}
task stageAdsFiles {}
task buildAdsDockerImage {
    group = "axiomatics"
}

task stageResourcesForAds(type: Copy) {
    into "${buildDir}/alfa/domain/ads/"
    from 'src/extra'
}


stageAdsFiles.dependsOn stageDeploymentDescriptor
stageAdsFiles.dependsOn stageResourcesForAds
stageAdsFiles.dependsOn stageLicenseFile

runAds.dependsOn stageAdsFiles

rootProject.plugins.apply(AlfaPlugin)







